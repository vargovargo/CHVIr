tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
library(plotly)
plot_ly(
data = plot.data,
x = ~ round(Participants / 1000000,1),
y = ~ round(Injuries / 1000,1),
type = "scatter",
mode = "markers",
text = plot.data[["Year"]],
color = ~AgeGroup,
showlegend = TRUE
) %>%
add_lines(y = ~fitted(loess(Participants / 1000000 ~ Injuries / 1000)),
line = list(color = 'rgba(7, 164, 181, 1)'),
name = "Loess Smoother") %>%
layout(
title = "Cyclist Injuries and Participation by Age",
xaxis = list(
title = "Millions of Participants",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
plot.data <- get.total.participation(adult.data,participation.data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
knitr::opts_knit$set(progress = FALSE, verbose  = FALSE)
setwd(dir = "E:/Bicycle Epi/from Tom/") # this sets the working direcetory for your work, I am working from a thumb drive
library(tidyverse) # this is a great all around package for manipulating, clean, wrangling and vizualizing data
library("survey") # this is a package that Tom used to conduct the analysis of survey data
# install.packages("survey") the survey package is not one I use much so you may need to install it
get.total.participation<-function(x,y){
#call function to get raw numbers of injuries in 10 year intervals
raw.num.table<-t(get.injury.agegroup.10yr(x))
raw.num.table<-raw.num.table[-(length(rownames(raw.num.table))),]
#calculate incidence
participation<-t(y)
#get data frame with incidence statistics in ggplot format
data.frame=assign("dataframe", NULL, envir = .GlobalEnv)
year<-as.data.frame(c(1997:2013))
for (i in 1:length(colnames(raw.num.table))){
age.group<-as.character(rep(colnames(raw.num.table)[i],17))
injuries<-raw.num.table[,i]
participation.loop<-as.numeric(participation[,i])
data.frame.loop<-as.data.frame(cbind(year,age.group,as.numeric(injuries),participation.loop))
data.frame<-rbind(data.frame,data.frame.loop)
}
data.frame[,1]<-as.factor(data.frame[,1])
colnames(data.frame)<-c("Year","AgeGroup","Injuries","Participants")
#sort by year
#data.frame<-data[order(data$Year),]
#data.frame[,"AgeGroup"]<-as.character(data.frame[,"AgeGroup"])
return(data.frame)
}
get.injury.agegroup.10yr<-function(x){
library(survey)
#get survey object
svyobj<-get.survey.object.10yr(x)
#svytotals
obj<-svyby(~num,~years+age_group,svytotal,design=svyobj)              # total injury number by year
year<-c(1997:2013)
range<-as.factor(c((rep("18-24",7)),(rep("25-34",10)),(rep("35-44",10)),(rep("45-54",10)),(rep("55-64",10)),(rep("65-74",10)),(rep("75-100",25))))
data.frame=assign("dataframe", NULL, envir = .GlobalEnv)                                        #initialize data frame
for (i in 0:6){
count<-c(((17*i)+1):((17*i)+17))
data.by.age.group<-obj[count,3]
data.frame<-rbind(data.frame,data.by.age.group)
}
#add class
class<-c(1,1,1,2,2,2,2)
data.frame<-cbind(data.frame,class)
colnames(data.frame)<-c(as.character(c(1997:2013)),"class")
rownames(data.frame)<- as.character(c("18-24","25-34","35-44","45-54","55-64","65-74","75-105"))
return(data.frame)
}
get.survey.object.10yr<-function(x){
library(survey)
comb<-get.large.dataset(x)
#survey design
svyobj<-svydesign(id=~psu,strata=~stratum,weights=~weight,data=comb)
#updating admission data
svyobj<-update(svyobj,admitted=(disposition==4))
svyobj<-update(svyobj,death=(disposition==8))
svyobj<-update(svyobj,treated_released=(disposition==1))
#updating race info
svyobj<-update(svyobj,is_white=(race==1))
svyobj<-update(svyobj,is_black=(race==2))
svyobj<-update(svyobj,is_asian=(race==4))
svyobj<-update(svyobj,is_other_race=(race==3 | race==5 | race==6 |race==4 & race!=0))
svyobj<-update(svyobj,race_not_listed=(race==0))
# update gender stuff
svyobj<-update(svyobj,is_male=(sex==1))
#update body part
svyobj<-update(svyobj,head_inj=(body_part==75))
svyobj<-update(svyobj,torso_inj=(body_part==31 | body_part==79))
svyobj<-update(svyobj,extrem_inj=(body_part==30 | body_part==32 | body_part==33 | body_part==34 | body_part==35 | body_part==36 | body_part==37 | body_part==80 | body_part==81 | body_part==82 | body_part==83 | body_part==92 | body_part==93))
svyobj<-svyobj<-update(svyobj,other_inj=(body_part!=75 & body_part!=31 & body_part!=79 & body_part!=30 & body_part!=32 & body_part!=33 & body_part!=34 & body_part!=35 & body_part!=36 & body_part!=37 & body_part!=80 & body_part!=81 & body_part!=82 & body_part!=83 & body_part!=92 & body_part!=93))
#adding year
svyobj<-update(svyobj,years=cut(year,c(1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014),right=FALSE))
#adding age group
svyobj<-update(svyobj,age_group=(cut(age,c(18,25,35,45,55,65,75,Inf),right=FALSE)))
return(svyobj)
}
get.large.dataset<-function(x){
dataframe.big<-assign("data.frame", NULL, envir = .GlobalEnv)
row.all<-assign("data.frame",NULL,envir=.GlobalEnv)
for (i in 1:length(x)){
dataframe=as.data.frame(x[[i]])
year<-rep(1996+i,length(rownames(dataframe)))
num<-as.integer(rep(1,length(rownames(dataframe))))
dataframe.small<-cbind(dataframe,year,num)
colnames<-c("Case","trmt_date","psu","weight","stratum","age","sex","race","race_other","diag","diag_other","body_part","disposition","location","fmv","prod1","prod2","narr1","narr2","year","num")
colnames(dataframe.small)<-colnames
dataframe.big<-rbind(dataframe.big,dataframe.small)
}
return(dataframe.big)
}
load("E:/Bicycle Epi/from Tom/adult.data.RData") # this command automatically save this data to an object called 'adult.data' that we can call
load("E:/Bicycle Epi/from Tom/particitipation.data.RData")
# adult <- readRDS("E:/Bicycle Epi/from Tom/adult.data.RData") # alternatively we could read in the data and send it to an object of whatever name we prefer, in this case 'adult'
head(participation.data) # here we see the firt 10 rows of the 'participation.data' - note there are only 7
names(participation.data) # see the column names of the table
years <- names(participation.data)
DT::datatable({
participation.data %>%
mutate(age = row.names(.)) %>%
gather(years, key = "year", value = "participation")
})
plot.data <- get.total.participation(adult.data,participation.data)
DT::datatable(plot.data)
# in the first part of this we'll tell ggplot which dataset to use, and what variables to use for x,y, color, and size, transparency, etc.
ggplot(plot.data, aes(Participants/1000000,Injuries/1000, color=factor(AgeGroup))) +
geom_point(stat="identity") + # we want to plot the points based on data we described in the first ggplot part
geom_smooth(method=lm, se=FALSE) + # we also want linear estimates for each age group
xlab("Millions of Participants") + # the rest of these are for customizing the labels
ylab("Thousands of Injuries") +
scale_color_discrete(name = "Age Group")
library(plotly)
plot_ly(
data = plot.data,
x = ~ round(Participants / 1000000,1),
y = ~ round(Injuries / 1000,1),
type = "scatter",
mode = "markers",
text = plot.data[["Year"]],
color = ~AgeGroup,
showlegend = TRUE
) %>%
add_lines(y = ~fitted(loess(Participants / 1000000 ~ Injuries / 1000)),
line = list(color = 'rgba(7, 164, 181, 1)'),
name = "Loess Smoother") %>%
layout(
title = "Cyclist Injuries and Participation by Age",
xaxis = list(
title = "Millions of Participants",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
plot_ly(
data = plot.data,
x = ~ round(Participants / 1000000,1),
y = ~ round(Injuries / 1000,1),
type = "scatter",
mode = "markers",
text = plot.data[["Year"]],
color = ~AgeGroup,
showlegend = TRUE
) %>%
add_lines(y = ~fitted(loess(Participants/1000000 ~ Injuries/1000)),
line = list(color = 'rgba(7, 164, 181, 1)'),
name = "Loess Smoother") %>%
layout(
title = "Cyclist Injuries and Participation by Age",
xaxis = list(
title = "Millions of Participants",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
plot_ly(
data = plot.data,
x = ~ round(Participants / 1000000,1),
y = ~ round(Injuries / 1000,1),
type = "scatter",
mode = "markers",
text = plot.data[["Year"]],
color = ~AgeGroup,
showlegend = TRUE
) %>%
add_lines(y = ~fitted(loess(Injuries/1000 ~Participants/1000000)),
line = list(color = 'rgba(7, 164, 181, 1)'),
name = "Loess Smoother") %>%
layout(
title = "Cyclist Injuries and Participation by Age",
xaxis = list(
title = "Millions of Participants",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
plot_ly(
data = plot.data,
x = ~ round(Participants / 1000000,1),
y = ~ round(Injuries / 1000,1),
type = "scatter",
mode = "markers",
text = plot.data[["Year"]],
color = ~AgeGroup,
showlegend = TRUE
) %>%
layout(
title = "Cyclist Injuries and Participation by Age",
xaxis = list(
title = "Millions of Participants",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
),
yaxis = list(
title = "Thousands of Injuries",
autotick = TRUE,
ticks = "outside",
tick0 = 0,
dtick = 1,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("black")
))  %>%
config(
collaborate = FALSE,
displaylogo = FALSE,
modeBarButtonsToRemove = list(
'toggleSpikelines',
'sendDataToCloud',
'hoverCompareCartesian',
'zoom2d',
'pan2d',
'select2d',
'lasso2d',
'zoomIn2d',
'zoomOut2d',
'autoScale2d',
'resetScale2d',
'hoverClosestCartesian'
))
shiny::runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
ui <- fluidPage(
navbarPage(theme = shinytheme("cosmo"),
title = "West Nile Virus Suitability Maps",
tabPanel(title = "start",
fluidRow(
column(3,
sliderInput(inputId = "year",
label = "Select a Year:",
min = 2006,
max = 2017,sep = "", ticks = TRUE,
value = 2006, step = 1,animate = TRUE)
),
column(3,
selectInput(inputId = "var",
label = "Select climate variable",
choices = c("weekly mean of mean daily temperature",
"weekly total of daily rainfall",
"count of days with temperature range favorable to mosquito activity (14-30C)",
"weekly count of rainy days >1mm")
)),
column(width = 3,
selectInput(inputId = "stat",
label = "Statistic",
choices = "Average","Maximum","Minimum","Standard Deviation"))
),
# Show a plot of the generated distribution
wellPanel(
leafletOutput("mapA")
)
)
)
)
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=unlist(str_split(string = colHead, pattern = "_"))[1],
statistic=unlist(str_split(string = colHead, pattern = "_"))[2]) %>%
select(-colHead)
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
runApp('GitHub/CHVIr/CHVIz')
runApp('UCSDwestNile/WNVsuitability')
runApp('UCSDwestNile/WNVsuitability')
View(foo)
View(foo)
View(foo)
runApp('UCSDwestNile/WNVsuitability')
counties <- st_read("~/UCSDwestNile/WVsuitability/counties.geojson") %>% st_transform(crs = 4326)
library(tidyverse)
library(leaflet)
library(shinythemes)
library(sf)
library(shiny)
foo <- read.csv("mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=unlist(str_split(string = colHead, pattern = "_"))[1],
statistic=unlist(str_split(string = colHead, pattern = "_"))[2]) %>%
select(-colHead)
counties <- st_read("~/UCSDwestNile/WVsuitability/counties.geojson") %>% st_transform(crs = 4326)
counties <- st_read("~/UCSDwestNile/WNVsuitability/counties.geojson") %>% st_transform(crs = 4326)
counties
runApp('UCSDwestNile/WNVsuitability')
runApp('GitHub/CHVIr/CHVIz')
runApp('GitHub/wildfires/kurtWFpaper/kurtPaper')
runApp('UCSDwestNile/WNVsuitability')
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=unlist(str_split(string = colHead, pattern = "_"))[1],
statistic=unlist(str_split(string = colHead, pattern = "_"))[2]) %>%
select(-colHead)
foo$variable=unlist(str_split(string = colHead, pattern = "_"))
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value)
foo$variable=unlist(str_split(string = colHead, pattern = "_"))
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value)
variable=unlist(str_split(string = foo$colHead, pattern = "_"))
unlist(str_split(string = foo$colHead, pattern = "_"))
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=lapply(strsplit(colHead, "_"), `[`, 1),
statistic=unlist(str_split(string = colHead, pattern = "_"))[2]) %>%
select(-colHead)
unique(foo$variable)
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=unlist(lapply(strsplit(colHead, "_"), `[`, 1)),
statistic=unlist(str_split(string = colHead, pattern = "_"))[2]) %>%
select(-colHead)
unique(foo$variable)
View(foo)
foo <- read.csv("~/UCSDwestNile/WNVsuitability/mapDataAnnual.csv", header=TRUE, stringsAsFactors = FALSE) %>%
gather(5:20, key = colHead, value = value) %>%
mutate(variable=unlist(lapply(strsplit(colHead, "_"), `[`, 1)),
statistic=unlist(lapply(strsplit(colHead, "_"), `[`, 2))) %>%
select(-colHead)
View(foo)
runApp('UCSDwestNile/WNVsuitability')
runApp('GitHub/CHVIr/CHVIz')
